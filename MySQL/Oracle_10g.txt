DBMS Assignment 1


-- Creating the STUD_MEMBER table
CREATE TABLE STUD_MEMBER (
    Roll_no VARCHAR(16),
    Name VARCHAR(20),
    Dept_id NUMBER(2),
    Sem NUMBER(1),
    Contact_No NUMBER(10),
    Gender VARCHAR(1)
);



SELECT * FROM STUD_MEMBER;

SELECT * FROM STUD_DETAILS;

SELECT * FROM DEPARTMENT;



-- Inserting data into STUD_MEMBER table
INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BIT/19/01', 'Ankur Das', 1, 1, 271210011, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BIT/19/02', 'Kamal Saha', 1, 1, 2321222211, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BIT/19/03', 'Ankita Banerjee', 1, 1, 1121213311, 'F');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BEE/19/01', 'Kamal Nandy', 2, 3, 1231233344, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BCE/19/08', 'Amit Saha', 3, 3, 4536677667, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BEE/19/014', 'Avijit Ghosh', 2, 1, 3232327643, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BEE/19/09', 'Ganesh Sill', 2, 3, 1242447643, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BCE/19/05', 'Sheta Thakur', 3, 1, 1242447644, 'F');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BCE/19/012', 'Puja Patra', 3, 3, 6463426789, 'F');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BEE/19/015', 'Kamal Halder', 2, 3, 3286562345, 'M');

INSERT INTO STUD_MEMBER (Roll_no, Name, Dept_id, Sem, Contact_no, Gender)
VALUES ('BWU/BME/19/06', 'Kiran Das', 5, 1, 2574225678, 'F');



-- Altering STUD_MEMBER to enforce the semester constraint
ALTER TABLE STUD_MEMBER
ADD CONSTRAINT sem_range CHECK (Sem > 0 AND Sem < 9);




-- Trying to insert a duplicate entry
INSERT INTO STUD_MEMBER (Roll_no, Name, Sem, Dept_id, Contact_no, Gender)
VALUES ('BWU/BIT/19/01', 'Ankur Das', 1, 1, 271210011, 'M');

-- Observation: Since no primary key has been enforced yet, the duplicate row will be inserted.



-- Renaming the Contact_no column to Mobile_No
ALTER TABLE STUD_MEMBER
RENAME COLUMN Contact_no TO Mobile_No;



DELETE FROM STUD_MEMBER
WHERE Roll_no = 'BWU/BIT/19/01'
AND Name = 'Ankur Das'
AND ROWNUM = 1;


-- Adding Roll_no as the primary key
ALTER TABLE STUD_MEMBER
ADD CONSTRAINT pk_roll_no PRIMARY KEY (Roll_no);



-- Displaying the names and mobile numbers of all students
SELECT Name, Mobile_No FROM STUD_MEMBER;



-- Creating STUD_DETAILS with the same structure and data
CREATE TABLE STUD_DETAILS AS SELECT * FROM STUD_MEMBER;



-- Renaming Contact_No to Ph_No in STUD_DETAILS
ALTER TABLE STUD_DETAILS
RENAME COLUMN Mobile_No TO Ph_No;



-- Updating phone number of Pooja Patra
UPDATE STUD_DETAILS
SET Ph_No = 03325345666
WHERE Name = 'Puja Patra';



-- Attempting to insert a student without Roll_no
INSERT INTO STUD_MEMBER (Name, Sem, Dept_id, Mobile_No, Gender)
VALUES ('John Doe', 2, 1, 9999999999, 'M');

-- Observation: It will throw an error because Roll_no is a primary key and cannot be NULL.



-- Displaying information for students whose name starts with 'A'
SELECT * FROM STUD_MEMBER WHERE Name LIKE 'A%';



-- Displaying all details of male members
SELECT * FROM STUD_MEMBER WHERE Gender = 'M';



-- Displaying all students currently in semester 3
SELECT * FROM STUD_MEMBER WHERE Sem = 3;



-- Displaying all female students in alphabetical order
SELECT * FROM STUD_MEMBER WHERE Gender = 'F' ORDER BY Name;



-- Displaying students whose name starts with 'A' and is at least 5 characters long
SELECT * FROM STUD_MEMBER WHERE Name LIKE 'A%' AND LENGTH(Name) >= 5;



-- Extracting only the numeric part of Avijit Ghoshâ€™s Roll_no
SELECT REGEXP_REPLACE(Roll_no, '[^0-9]', '') AS Numeric_Roll_No
FROM STUD_MEMBER
WHERE Name = 'Avijit Ghosh';



-- Creating the DEPARTMENT table
CREATE TABLE DEPARTMENT (
    Dept_id NUMBER(2),
    Dept_Name VARCHAR(50)
);



-- Adding primary key to Dept_id
ALTER TABLE DEPARTMENT
ADD CONSTRAINT pk_dept PRIMARY KEY (Dept_id);



-- Populating DEPARTMENT with data
INSERT INTO DEPARTMENT (Dept_id, Dept_name) VALUES (1, 'Information Technology');
INSERT INTO DEPARTMENT (Dept_id, Dept_name) VALUES (2, 'Electrical');
INSERT INTO DEPARTMENT (Dept_id, Dept_name) VALUES (3, 'Civil');
INSERT INTO DEPARTMENT (Dept_id, Dept_name) VALUES (4, 'Mechanical');
INSERT INTO DEPARTMENT (Dept_id, Dept_name) VALUES (5, 'Electronics');



-- Adding foreign key to Dept_id in STUD_MEMBER
ALTER TABLE STUD_MEMBER
ADD CONSTRAINT fk_dept FOREIGN KEY (Dept_id) REFERENCES DEPARTMENT(Dept_id);



-- Adding a new column Dept_loc to DEPARTMENT
ALTER TABLE DEPARTMENT
ADD Dept_loc VARCHAR2(10);



-- Update the Dept_loc for each department
UPDATE DEPARTMENT
SET Dept_loc = 'Kolkata'
WHERE Dept_id = 1;

UPDATE DEPARTMENT
SET Dept_loc = 'Barasat'
WHERE Dept_id = 2;

UPDATE DEPARTMENT
SET Dept_loc = 'Barasat'
WHERE Dept_id = 3;

UPDATE DEPARTMENT
SET Dept_loc = 'Kolkata'
WHERE Dept_id = 4;

UPDATE DEPARTMENT
SET Dept_loc = 'Barasat'
WHERE Dept_id = 5;



-- Displaying names and roll numbers of IT students
SELECT Name, Roll_no FROM STUD_MEMBER WHERE Dept_id = 1;



-- Displaying all department names
SELECT Dept_name FROM DEPARTMENT;



-- Finding the department of Amit Saha using a subquery
SELECT Dept_name 
FROM DEPARTMENT
WHERE Dept_id = (
    SELECT Dept_id 
    FROM STUD_MEMBER 
    WHERE Name = 'Amit Saha'
);



-- Display all students from departments located in Kolkata
SELECT * 
FROM STUD_MEMBER
WHERE Dept_id IN (
    SELECT Dept_id 
    FROM DEPARTMENT 
    WHERE Dept_loc = 'Kolkata'
);



-- Trying to delete Electronics department
DELETE FROM DEPARTMENT WHERE Dept_name = 'Electronics';

-- Observation: If there are students in the Electronics department, the deletion will fail due to foreign key constraint.



-- Deleting Electronics from DEPARTMENT (if no foreign key constraint issue)
DELETE FROM DEPARTMENT WHERE Dept_name = 'Electronics';











DBMS Assignment 2



CREATE TABLE MATCH (
    MATCH_ID NUMBER PRIMARY KEY, 
    Team1 VARCHAR(50),
    Team2 VARCHAR(50),
    Ground VARCHAR(50),
    Play_Date DATE,
    Winner VARCHAR(50)
);



CREATE TABLE PLAYER (
    PLAYER_ID NUMBER PRIMARY KEY,
    LNAME VARCHAR (50),
    FNAME VARCHAR (50),
    COUNTRY VARCHAR (50),
    YBORN NUMBER (4),
    BPLACE VARCHAR (50),
    FTEST NUMBER (4)
);



CREATE TABLE Bowling (
    Match_Id NUMBER,
    Player_Id NUMBER,
    Novers NUMBER,
    Maidens NUMBER,
    Nrun_rcv NUMBER,
    Nwickets NUMBER
);



CREATE TABLE Batting (
    Match_Id NUMBER,
    Player_Id NUMBER,
    Nrun_sc NUMBER
);



-- Add foreign key constraint for Match_Id referencing Match table
ALTER TABLE Bowling
ADD CONSTRAINT fk_bowling_match
FOREIGN KEY (Match_Id)
REFERENCES Match(Match_Id);



-- Add foreign key constraint for Player_Id referencing Player table
ALTER TABLE Bowling
ADD CONSTRAINT fk_bowling_player
FOREIGN KEY (Player_Id)
REFERENCES Player(Player_Id);



-- Add foreign key constraint for Match_Id referencing Match table
ALTER TABLE Batting
ADD CONSTRAINT fk_batting_match
FOREIGN KEY (Match_Id)
REFERENCES Match(Match_Id);



-- Add foreign key constraint for Player_Id referencing Player table
ALTER TABLE Batting
ADD CONSTRAINT fk_batting_player
FOREIGN KEY (Player_Id)
REFERENCES Player(Player_Id);



INSERT INTO Match (Match_Id, Team1, Team2, Ground, Play_Date, Winner) VALUES (2475, 'Australia', 'India', 'Melbourne', TO_DATE('10-FEB-2008', 'DD-MON-YYYY'), 'Team2');
INSERT INTO Match (Match_Id, Team1, Team2, Ground, Play_Date, Winner) VALUES (2576, 'India', 'Srilanka', 'Adelaide', TO_DATE('19-FEB-2008', 'DD-MON-YYYY'), 'Team1');
INSERT INTO Match (Match_Id, Team1, Team2, Ground, Play_Date, Winner) VALUES (2677, 'Australia', 'India', 'Sydney', TO_DATE('02-MAR-2008', 'DD-MON-YYYY'), 'Team1');
INSERT INTO Match (Match_Id, Team1, Team2, Ground, Play_Date, Winner) VALUES (2778, 'Australia', 'Srilanka', 'Brisbane', TO_DATE('04-MAR-2008', 'DD-MON-YYYY'), 'Team2');
INSERT INTO Match (Match_Id, Team1, Team2, Ground, Play_Date, Winner) VALUES (2879, 'Srilanka', 'India', 'Colombo', TO_DATE('27-AUG-2008', 'DD-MON-YYYY'), 'Team2');



INSERT INTO Player (Player_Id, Lname, Fname, Country, Yborn, Bplace, Ftest) VALUES (49001, 'Tendulkar', 'Sachin', 'India', 1973, 'Mumbai', 1986);
INSERT INTO Player (Player_Id, Lname, Fname, Country, Yborn, Bplace, Ftest) VALUES (49002, 'Dravid', 'Rahul', 'India', 1973, 'Indore', 1996);
INSERT INTO Player (Player_Id, Lname, Fname, Country, Yborn, Bplace, Ftest) VALUES (59001, 'Vass', 'Chaminda', 'Srilanka', 1974, 'Mattumagala', 1994);
INSERT INTO Player (Player_Id, Lname, Fname, Country, Yborn, Bplace, Ftest) VALUES (59002, 'Jayasuriya', 'Sanath', 'Srilanka', 1969, 'Matara', 1991);
INSERT INTO Player (Player_Id, Lname, Fname, Country, Yborn, Bplace, Ftest) VALUES (69001, 'Lee', 'Brett', 'Australia', 1976, 'Wollongong', 1999);
INSERT INTO Player (Player_Id, Lname, Fname, Country, Yborn, Bplace, Ftest) VALUES (69002, 'Symonds', 'Andrew', 'Australia', 1975, 'Birmingham', 2004);



INSERT INTO Bowling (Match_Id, Player_Id, Novers, Maidens, Nrun_rcv, Nwickets) VALUES (2576, 59001, 8, 3, 58, 1);
INSERT INTO Bowling (Match_Id, Player_Id, Novers, Maidens, Nrun_rcv, Nwickets) VALUES (2677, 69001, 10, 1, 27, 3);
INSERT INTO Bowling (Match_Id, Player_Id, Novers, Maidens, Nrun_rcv, Nwickets) VALUES (2879, 49002, 7, 0, 44, 0);
INSERT INTO Bowling (Match_Id, Player_Id, Novers, Maidens, Nrun_rcv, Nwickets) VALUES (2576, 49001, 3, 2, 15, 1);
INSERT INTO Bowling (Match_Id, Player_Id, Novers, Maidens, Nrun_rcv, Nwickets) VALUES (2778, 59001, 7, 1, 20, 5);



INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2677, 49001, 60);
INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2778, 59002, 71);
INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2879, 59001, 60);
INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2778, 69002, 17);
INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2879, 59002, 45);
INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2576, 49001, 36);
INSERT INTO Batting (Match_Id, Player_Id, Nrun_sc) VALUES (2475, 49002, 72);



1. a) Find the ground of the matches batted by player whose Fname is starting from â€˜Sâ€™.

SELECT DISTINCT M.Ground
FROM Match M
JOIN Batting B ON M.Match_Id = B.Match_Id
JOIN Player P ON B.Player_Id = P.Player_Id
WHERE P.Fname LIKE 'S%';



b) Find Idâ€™s of player that have bowled in the match 2576 but not have batted.

SELECT B.Player_Id
FROM Bowling B
WHERE B.Match_Id = 2576
AND B.Player_Id NOT IN (
    SELECT Bat.Player_Id
    FROM Batting Bat
    WHERE Bat.Match_Id = 2576
);



c) Find the batting average of each Indian player along with the Player_Id

SELECT P.Player_Id, P.Fname, P.Lname, 
       SUM(B.Nrun_sc) / COUNT(B.Match_Id) AS Batting_Avg
FROM Player P
JOIN Batting B ON P.Player_Id = B.Player_Id
WHERE P.Country = 'India'
GROUP BY P.Player_Id, P.Fname, P.Lname;



d) Find the name of that player who has bowled highest number of overs and also find the
ground where he has bowled.

SELECT P.Player_id, P.Fname, P.Lname, M.Ground, MAX(B.Novers) AS Max_Overs
FROM Bowling B
JOIN Player P ON B.Player_Id = P.Player_Id
JOIN Match M ON B.Match_Id = M.Match_Id
GROUP BY P.Player_Id, P.Fname, P.Lname, M.Ground
ORDER BY Max_Overs DESC;



2. a) Find the total run scored by a player who played First Test in 1991.

SELECT P.Player_Id, P.Fname, P.Lname, SUM(B.Nrun_sc) AS Total_Runs
FROM Player P
JOIN Batting B ON P.Player_Id = B.Player_Id
WHERE P.Ftest = 1991
GROUP BY P.Player_Id, P.Fname, P.Lname;



b) Find the name and the number of wickets taken by the youngest player in the data base.

SELECT P.Fname, P.Lname, COALESCE(SUM(B.Nwickets), 0) AS Wickets
FROM Player P
LEFT JOIN Bowling B ON P.Player_Id = B.Player_Id
WHERE P.YBORN = (SELECT MIN(YBORN) FROM Player)
GROUP BY P.Player_Id, P.Fname, P.Lname;



c) Find the names of the players who batted in only one match.

SELECT P.Fname, P.Lname
FROM Player P
JOIN Batting B ON P.Player_Id = B.Player_Id
GROUP BY P.Player_Id, P.Fname, P.Lname
HAVING COUNT(B.Match_Id) = 1;



d) Find the name of the player who has taken the highest wickets in a particular match andalso
find the ground where the player has taken the wickets.

SELECT P.Fname, P.Lname, M.Ground, B.Nwickets
FROM Bowling B
JOIN Player P ON B.Player_Id = P.Player_Id
JOIN Match M ON B.Match_Id = M.Match_Id
WHERE (B.Match_Id, B.Nwickets) IN (
    SELECT B.Match_Id, MAX(B.Nwickets)
    FROM Bowling B
    GROUP BY B.Match_Id
)
ORDER BY B.Nwickets DESC;



3. a) Find the ground where Sachin Tendulkar has scored his highest run.

SELECT M.Ground, MAX(B.Nrun_sc) AS Highest_Run
FROM Batting B
JOIN Player P ON B.Player_Id = P.Player_Id
JOIN Match M ON B.Match_Id = M.Match_Id
WHERE P.Fname = 'Sachin' AND P.Lname = 'Tendulkar'
GROUP BY M.Ground;



b) Find out the name of a Srilankan bowler who has delivered at least 2 maiden overs.

SELECT P.Fname, P.Lname
FROM Bowling B
JOIN Player P ON B.Player_Id = P.Player_Id
WHERE P.Country = 'Srilanka' AND B.Maidens >= 2;



c) Find the Number of wickets of that player whose Birth place in Mattumagala.

SELECT SUM(B.Nwickets) AS Total_Wickets
FROM Bowling B
JOIN Player P ON B.Player_Id = P.Player_Id
WHERE P.Bplace = 'Mattumagala';



d) Find the names of the players who played in more than one matches.

SELECT P.Fname, P.Lname
FROM Player P
JOIN Batting B ON P.Player_Id = B.Player_Id
GROUP BY P.Player_Id, P.Fname, P.Lname
HAVING COUNT(B.Match_Id) > 1;